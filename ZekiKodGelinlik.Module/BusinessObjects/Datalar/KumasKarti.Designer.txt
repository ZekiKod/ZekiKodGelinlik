//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using DevExpress.Xpo;
using DevExpress.Xpo.Metadata;
using DevExpress.Data.Filtering;
using System.Collections.Generic;
using System.ComponentModel;
using System.Reflection;
using DevExpress.ExpressApp.Model.Core;
using DevExpress.Persistent.Base;
using System.Drawing.Drawing2D;
using System.Drawing;
namespace ZekiKod.Module.BusinessObjects.ZekiKodDB
{

    public partial class KumasKarti : XPObject
    {
        Kumas_iplikNo fipliknumarasi;
        public Kumas_iplikNo ipliknumarasi
        {
            get { return fipliknumarasi; }
            set { SetPropertyValue<Kumas_iplikNo>(nameof(ipliknumarasi), ref fipliknumarasi, value); }
        }
        Kumasicerik ficerik;
        public Kumasicerik icerik
        {
            get { return ficerik; }
            set { SetPropertyValue<Kumasicerik>(nameof(icerik), ref ficerik, value); }
        }
        KumasCinsi fKumasCinsi;
        public KumasCinsi KumasCinsi
        {
            get { return fKumasCinsi; }
            set { SetPropertyValue<KumasCinsi>(nameof(KumasCinsi), ref fKumasCinsi, value); }
        }
        K_KoduTablo fK_KODU;
        public K_KoduTablo K_KODU
        {
            get { return fK_KODU; }
            set { SetPropertyValue<K_KoduTablo>(nameof(K_KODU), ref fK_KODU, value); }
        }
        string fAciklama;
        public string Aciklama
        {
            get { return fAciklama; }
            set { SetPropertyValue<string>(nameof(Aciklama), ref fAciklama, value); }
        }
        [PersistentAlias("[ipliknumarasi.iplik_No] + ' ' + [icerik.icerik] + ' ' + [KumasCinsi.KumasCins] + ' ' + [K_KODU.KumasKodu] + ' ' + [Aciklama]")]
        public string Kumas
        {
            get { return (string)(EvaluateAlias(nameof(Kumas))); }
        }
        string fK_RaporNo;
        public string K_RaporNo
        {
            get { return fK_RaporNo; }
            set { SetPropertyValue<string>(nameof(K_RaporNo), ref fK_RaporNo, value); }
        }
        Renkler fRenkler;
        public Renkler Renkler
        {
            get { return fRenkler; }
            set { SetPropertyValue<Renkler>(nameof(Renkler), ref fRenkler, value); }
        }
        //    byte[] fResmi;
        //    [MemberDesignTimeVisibility(true)]
        //    [DevExpress.Persistent.Base.VisibleInListView(true)]
        //    [DevExpress.Persistent.Base.ImageEditor(ListViewImageEditorMode = DevExpress.Persistent.Base.ImageEditorMode.PictureEdit,
        //DetailViewImageEditorMode = DevExpress.Persistent.Base.ImageEditorMode.PictureEdit,
        //ListViewImageEditorCustomHeight = 40)]
        //    public byte[] Resmi
        //    {
        //        get { return fResmi; }
        //        set { SetPropertyValue<byte[]>(nameof(Resmi), ref fResmi, value); }
        //    }

        [NonPersistent]
        [VisibleInListView(true), VisibleInDetailView(false)]
        [DevExpress.ExpressApp.DC.XafDisplayName("Resim")]
        [ImageEditor]
        public byte[] ResimThumb
        {
            get { return File.Exists(ResimThumbPath) ? File.ReadAllBytes(ResimThumbPath) : null; }
        }

        string fResimThumbPath;
        [Size(SizeAttribute.Unlimited)]
        public string ResimThumbPath
        {
            get { return fResimThumbPath; }
            set { SetPropertyValue(nameof(ResimThumbPath), ref fResimThumbPath, value); }
        }


        string fResimPath;
        [Size(SizeAttribute.Unlimited)]
        public string ResimPath
        {
            get { return fResimPath; }
            set { SetPropertyValue(nameof(ResimPath), ref fResimPath, value); }
        }

        [NonPersistent]
        [VisibleInListView(false), VisibleInDetailView(true)]
        [DevExpress.ExpressApp.DC.XafDisplayName("Resim")]
        [ImageEditor]
        public byte[] Resim
        {
            get { return File.Exists(ResimPath) ? File.ReadAllBytes(ResimPath) : null; }
            set
            {
                if (!IsLoading && !IsSaving && value != null)
                {
                    ResimPath = SaveImageToFile(value, Oid, !string.IsNullOrEmpty(Aciklama) ? Aciklama.Replace(" ", "") : "", "KumasResim");
                    ResimThumbPath = SaveImageToFileThumb(value, Oid, !string.IsNullOrEmpty(Aciklama) ? Aciklama.Replace(" ", "") : "", "KumasResimThumb");
                }
            }
        }

        private string SaveImageToFile(byte[] image, int oid, string _modelNo, string klasor)
        {
            string fileName = klasor + "\\" + _modelNo + "-" + oid.ToString().Replace(",", "").Replace(".", "") + ".jpg";
            File.WriteAllBytes(fileName, image);
            return fileName;
        }

        private string SaveImageToFileThumb(byte[] imageStream, int oid, string _modelNo, string klasor)
        {
            string thumbnailFileName = Path.Combine(klasor, _modelNo + "-" + oid.ToString().Replace(",", "").Replace(".", "") + "-thumbnail.jpg");

            // Load the image from the stream
            using (Image image = Image.FromStream(new MemoryStream(imageStream)))
            {
                // Set the new size for the thumbnail
                int thumbnailWidth = 200;
                int originalWidth = image.Width;
                int originalHeight = image.Height;
                float widthRatio = (float)thumbnailWidth / (float)originalWidth;
                float heightRatio = (float)thumbnailWidth / (float)originalWidth;
                float ratio = Math.Min(widthRatio, heightRatio);
                int newWidth = (int)(originalWidth * ratio);
                int newHeight = (int)(originalHeight * ratio);

                using (Bitmap thumbnail = new Bitmap(thumbnailWidth, newHeight))
                {
                    using (Graphics graphics = Graphics.FromImage(thumbnail))
                    {
                        graphics.CompositingQuality = CompositingQuality.HighQuality;
                        graphics.InterpolationMode = InterpolationMode.HighQualityBicubic;
                        graphics.DrawImage(image, 0, 0, newWidth, newHeight);
                    }

                    thumbnail.Save(thumbnailFileName, image.RawFormat);
                }
            }

            return thumbnailFileName;
        }
        [Association(@"KumasFiyatlariReferencesKumasKarti"), Aggregated]
        public XPCollection<KumasFiyatlari> KumasFiyatlaris { get { return GetCollection<KumasFiyatlari>(nameof(KumasFiyatlaris)); } }
    }

}
